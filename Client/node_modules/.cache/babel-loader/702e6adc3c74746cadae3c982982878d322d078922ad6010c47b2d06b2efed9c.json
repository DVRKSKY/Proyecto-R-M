{"ast":null,"code":"import { ADD_FAV, FILTER_CARDS, ORDER_CARDS, REMOVE_FAV, RESET_FILTER, ADD_CHARACTER, REMOVE_CHARACTER, DELETE_CHARACTER } from \"./actions\";\nconst initialState = {\n  myFavorites: [],\n  allCharacters: [],\n  characters: [],\n  alert: false\n};\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_FAV:\n      //Le enviamos por payload lo que queremos actualizar\n      //De esta manera agregamos sin chancar al state global\n      //No usamos el push y pop, porque no estamos manendo el estado. sino estariamos tocando el array\n      return {\n        ...state,\n        myFavorites: action.payload,\n        allCharacters: action.payload\n      };\n    //Esto me manda mucha data\n    case REMOVE_FAV:\n      //const newFavorites = state.allCharacters.filter(fav => fav.id !== parseInt(action.payload))\n      //return {...state, myFavorites: newFavorites, allCharacters: newFavorites}\n      return {\n        ...state,\n        myFavorites: action.payload\n      };\n    case FILTER_CARDS:\n      const newFilter = state.allCharacters.filter(ch => ch.gender === action.payload);\n      return {\n        ...state,\n        myFavorites: newFilter\n      };\n    case RESET_FILTER:\n      return {\n        ...state,\n        myFavorites: [...state.allCharacters]\n      };\n    case ORDER_CARDS:\n      //creamos una copia del arrayoriginal\n      const allCharactersCopy = [...state.allCharacters];\n      //condicionamos si es a o d\n      const orderFactor = action.payload === \"A\" ? 1 : -1;\n      //ejecutamos el ordenamiento de acuerdo al payload recibido\n      allCharactersCopy.sort((a, b) => (a.id - b.id) * orderFactor);\n      //retornmos el array ordenado\n      return {\n        ...state,\n        myFavorites: allCharactersCopy\n      };\n    case ADD_CHARACTER:\n      if (Array.isArray(action.payload)) {\n        return {\n          ...state,\n          characters: [...state.characters, ...action.payload]\n        };\n      }\n      return {\n        ...state,\n        characters: [action.payload, ...state.characters]\n      };\n    case REMOVE_CHARACTER:\n      const newCharacter = state.myFavoritesOrigin.filter(ch => ch.id !== action.payload);\n      return {\n        ...state,\n        myFavorites: newCharacter,\n        myFavoritesOrigin: newCharacter\n      };\n    case DELETE_CHARACTER:\n      const characterDeleted = state.characters.filter(ch => ch.id !== action.payload);\n      return {\n        ...state,\n        characters: characterDeleted\n      };\n    //Caso base de default\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["ADD_FAV","FILTER_CARDS","ORDER_CARDS","REMOVE_FAV","RESET_FILTER","ADD_CHARACTER","REMOVE_CHARACTER","DELETE_CHARACTER","initialState","myFavorites","allCharacters","characters","alert","rootReducer","state","arguments","length","undefined","action","type","payload","newFilter","filter","ch","gender","allCharactersCopy","orderFactor","sort","a","b","id","Array","isArray","newCharacter","myFavoritesOrigin","characterDeleted"],"sources":["C:/Users/Amadeo Flores/Desktop/rick_and_morty/Client/src/redux/reducer.js"],"sourcesContent":["import { ADD_FAV, FILTER_CARDS, ORDER_CARDS, REMOVE_FAV, RESET_FILTER, ADD_CHARACTER, REMOVE_CHARACTER, DELETE_CHARACTER } from \"./actions\"\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n\tallCharacters: [],\r\n\tcharacters : [],\r\n\talert: false,\r\n}\r\n\r\nconst rootReducer = (state = initialState, action) =>  {\r\n\t\r\n\tswitch(action.type){\r\n\t\r\n\t\tcase ADD_FAV:\r\n\t\t\t//Le enviamos por payload lo que queremos actualizar\r\n\t\t\t//De esta manera agregamos sin chancar al state global\r\n\t\t\t//No usamos el push y pop, porque no estamos manendo el estado. sino estariamos tocando el array\r\n\t\t\treturn { ...state, myFavorites: action.payload, allCharacters: action.payload };\r\n\t\t\t//Esto me manda mucha data\r\n        case REMOVE_FAV:\r\n\t\t\t//const newFavorites = state.allCharacters.filter(fav => fav.id !== parseInt(action.payload))\r\n            //return {...state, myFavorites: newFavorites, allCharacters: newFavorites}\r\n\t\t\treturn { ...state, myFavorites: action.payload };\r\n\t\tcase FILTER_CARDS:\r\n\t\t\tconst newFilter = state.allCharacters.filter(\r\n\t\t\t\t(ch) => ch.gender === action.payload\r\n\t\t\t  );\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmyFavorites: newFilter,\r\n\t\t\t};\r\n\t\tcase RESET_FILTER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmyFavorites: [...state.allCharacters],\r\n\t\t\t};\r\n\t\tcase ORDER_CARDS: \r\n\t\t\t//creamos una copia del arrayoriginal\r\n\t\t\tconst allCharactersCopy = [...state.allCharacters];\r\n\t\t\t//condicionamos si es a o d\r\n\t\t\tconst orderFactor = action.payload === \"A\" ? 1 : -1;\r\n\t\t\t//ejecutamos el ordenamiento de acuerdo al payload recibido\r\n\t\t\tallCharactersCopy.sort((a, b) => (a.id - b.id) * orderFactor);\r\n\t\t\t//retornmos el array ordenado\r\n\t\t\treturn { ...state, myFavorites: allCharactersCopy };\r\n\t\t  \r\n\t\tcase ADD_CHARACTER:\r\n\t\t\tif (Array.isArray(action.payload)) {\r\n\t\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcharacters: [...state.characters, ...action.payload],\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcharacters: [action.payload, ...state.characters],\r\n\t\t\t};\r\n\t\tcase REMOVE_CHARACTER:\r\n\t\t\tconst newCharacter = state.myFavoritesOrigin.filter(\r\n\t\t\t\t(ch) => ch.id !== action.payload\r\n\t\t\t);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmyFavorites: newCharacter,\r\n\t\t\t\tmyFavoritesOrigin: newCharacter,\r\n\t\t\t};\r\n\t\tcase DELETE_CHARACTER:\r\n\t\t\tconst characterDeleted = state.characters.filter(\r\n\t\t\t\t(ch) => ch.id !== action.payload\r\n\t\t\t);\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcharacters: characterDeleted,\r\n\t\t\t}\r\n\t\t//Caso base de default\r\n\t\tdefault:\r\n\t\t\treturn {...state}\r\n\t}\t\r\n\r\n}\r\nexport default rootReducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}